{
  "_args": [
    [
      {
        "raw": "hbase@^0.3.0",
        "scope": null,
        "escapedName": "hbase",
        "name": "hbase",
        "rawSpec": "^0.3.0",
        "spec": ">=0.3.0 <0.4.0",
        "type": "range"
      },
      "/home/eduard/.hackolade/plugins/HBase/reverse_engineering"
    ]
  ],
  "_from": "hbase@>=0.3.0 <0.4.0",
  "_id": "hbase@0.3.0",
  "_inCache": true,
  "_location": "/hbase",
  "_nodeVersion": "6.9.2",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/hbase-0.3.0.tgz_1508149008821_0.923434640513733"
  },
  "_npmUser": {
    "name": "david",
    "email": "david@adaltas.com"
  },
  "_npmVersion": "3.10.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "hbase@^0.3.0",
    "scope": null,
    "escapedName": "hbase",
    "name": "hbase",
    "rawSpec": "^0.3.0",
    "spec": ">=0.3.0 <0.4.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/hbase/-/hbase-0.3.0.tgz",
  "_shasum": "0187ba444710e3e396c7f87d4db2b05c11ee9ea5",
  "_shrinkwrap": null,
  "_spec": "hbase@^0.3.0",
  "_where": "/home/eduard/.hackolade/plugins/HBase/reverse_engineering",
  "author": {
    "name": "David Worms",
    "email": "david@adaltas.com"
  },
  "bugs": {
    "url": "https://github.com/adaltas/node-hbase/issues"
  },
  "contributors": [
    {
      "name": "David Worms",
      "email": "david@adaltas.com"
    },
    {
      "name": "Michael Kurze",
      "email": "https://github.com/michaelku"
    },
    {
      "name": "Michal Taborsky",
      "email": "https://github.com/whizz"
    },
    {
      "name": "Marc Trudel",
      "email": "https://github.com/stelcheck"
    },
    {
      "name": "Krisztina Hirth",
      "email": "https://github.com/yellowbrickc"
    }
  ],
  "dependencies": {
    "krb5": "^0.1.0"
  },
  "description": "HBase client using the REST connector",
  "devDependencies": {
    "coffeescript": "^2.0.1",
    "each": "^0.6.1",
    "mocha": "^4.0.1",
    "should": "^13.1.2"
  },
  "directories": {},
  "dist": {
    "shasum": "0187ba444710e3e396c7f87d4db2b05c11ee9ea5",
    "tarball": "https://registry.npmjs.org/hbase/-/hbase-0.3.0.tgz"
  },
  "engines": {
    "node": ">= 0.1.90"
  },
  "gitHead": "97ad64253fe740e615950b4ab5bce640b9a12ec1",
  "homepage": "https://github.com/adaltas/node-hbase",
  "license": "BSD-3-Clause",
  "main": "./lib/index",
  "maintainers": [
    {
      "name": "david",
      "email": "david@adaltas.com"
    }
  ],
  "name": "hbase",
  "optionalDependencies": {
    "krb5": "^0.1.0"
  },
  "readme": "\n[![Build Status](https://secure.travis-ci.org/adaltas/node-hbase.png)](http://travis-ci.org/adaltas/node-hbase)\n\nNode HBase is a Node.JS client for the Apache HBase database. It use the Rest\nAPI (Stargate) to communicate with HBase. Currently, all the API is implemented\nand the data exchange format is JSON (but protocol buffer could follow).\n\nApache HBase is part of the Hadoop ecosystem. It describes itself as the Hadoop\ndatabase optimized for random, realtime read/write access to big data. It is an\nopen-source, distributed, versioned, column-oriented store modeled after Google\nBigtable.\n\nClient features include:\n\n*   Intuitive API following HBase naming conventions\n*   Documentation and tests\n*   Full Implementation of the REST API\n*   Transparent encoding/decoding of values\n*   Scanner and filter support implementing the `stream.Readable` API\n*   Kerberos Support\n\n## About HBase\n\nHBase is part of the Hadoop ecosystem from the Apache Software Foundation. It \nis a column oriented database (think NoSql) that really scale and is modelled \nafter Google papers and its BigTable database.\n\n## Installing\n\nVia [npm](http://github.com/isaacs/npm):\n\n```bash\nnpm install hbase\n```\n\n## Documentation\n\n* [Index](./blob/master/src/index.coffee.md)   \n  Getting started\n* [Client](./blob/master/src/client.coffee.md)   \n  Server information and object factory\n* [Connection](./blob/master/src/connect.coffee.md)   \n  HTTP REST requests\n* [Row](./blob/master/src/row.coffee.md)   \n  CRUD operation on rows and columns\n* [Scanner](./blob/master/src/scanner.coffee.md)   \n  Retrieve multiple rows and columns\n* [Table](./blob/master/src/table.coffee.md)   \n  Create, modify and delete HBase tables\n\n## Quick example\n\nThis code create a new HBase instance, create a table and a column family,\ninsert a few records and traverse them.\n\n```javascript\nvar assert = require('assert');\nvar hbase = require('hbase');\n\nhbase({ host: '127.0.0.1', port: 8080 })\n.table('my_table' )\n.create('my_column_family', function(err, success){\n  this\n  .row('my_row')\n  .put('my_column_family:my_column', 'my value', function(err, success){\n    this.get('my_column_family', function(err, cells){\n      this.exists(function(err, exists){\n        assert.ok(exists);\n      });\n    });\n  });\n});\n```\n\n## Using Kerberos/SPNEGO\n\nOptions accepts a krb5 object. Password and keytab authentication are supported. \nRefer to the [krb5] package for additionnal information on how to configure the\nkrb5 option.\n\nUsing a keytab:\n\n```\nvar hbase = require('hbase');\nhbase({\n  host: '127.0.0.1',\n  port: 8080,\n  \"krb5\": {\n    \"principal\": \"{username}@{REALM}\",\n    \"keytab\": \"{path/to/keytab}\",\n    \"service_principal\": \"HTTP@{fqdn}\"\n  }\n})\n.version();\n```\n\nUsing a password:\n\n```\nvar hbase = require('hbase');\nhbase({\n  host: '127.0.0.1',\n  port: 8080,\n  \"krb5\": {\n    \"principal\": \"{username}@{REALM}\",\n    \"password\": \"{password}\",\n    \"service_principal\": \"HTTP@{fqdn}\"\n  }\n})\n.version();\n```\n\n## Scanner and Filters\n\nThe scanner implement the `stream.Readable` API. For ease of usage, an optional\ncallback argument may be provided. For example:\n\n```bash\nclient\n.table('node_table')\n.scan({\n  startRow: 'my_row',\n  maxVersions: 1\n}, function(err, rows){\n  console.log(err, rows);\n});\n```\n\nis equivalent to:\n\n```coffee\nvar rows = [];\nscanner = client\n.table('node_table')\n.scan({\n  startRow: 'my_row',\n  maxVersions: 1\n});\nscanner.on('readable', function(){\n  while(chunk = scanner.read()){\n    rows.push(chunk);\n  }\n});\nscanner.on('error', function(err){\n  console.log(err);\n});\nscanner.on('end', function(){\n  console.log(rows);\n});\n```\n\nIt can be quite a pain to figure out what options can be sent\nwith a scanner request. You will find a lot of examples inside the \n[Scanner test][scanner] and also look at the [examples][mt_samples] published by\n[Marc Trudel][mt_home].\n\n## Running the tests\n\nTests are executed with mocha. Before running the tests the first time, copy the\nfile \"./test/properties.json.sample\" to \"./test/properties.json\" and make the\nappropriate changes.\n\nIf using the HDP sandbox, start the virtual machine, log-in as \"root\", start\nAmbari `start_ambari.sh`, start HBase `start_hbase.sh` and start the HBase REST\nserver `/usr/lib/hbase/bin/hbase rest -p 60080`.\nOtherwise you can run HBase in locally with \n`docker run --name stargate --rm -p 60080:8080 sixeyed/hbase-stargate`\n`docker run --name stargate -p 2181:2181 -p 60010:60010 -p 60000:60000 -p 60020:60020 -p 60030:60030 -p 60080:8080 -p 8085:8085 sixeyed/hbase-stargate`\n\nTo run the tests:\n\n```bash\nnpm test\n```\n\nThere is also a Dockerfile under `hbase-rest-reverse-proxy/` that creates an Nginx reverse proxy to HBase REST. This image can be used to test cases where the REST service runs behind a proxy. The file `test/properties_with_path.docker.coffee` can be used to test scenarios where HBase REST is accessible through a custom path (`/rest`).\n\nWhen testing against HBase secured with Kerberos, you must create a table with\nthe right ownership.\n\n```bash\nkinit hbase\nhbase shell\ncreate 'node_table', {NAME => 'node_column_family', VERSIONS => 5}\ngrant 'ryba', 'RWC', 'node_table'\n```\n\nYou can use the example located in \"test/properties.json.krb5\" to configure the\ntest. It comes pre-configured for [Ryba] configured in development cluster mode.\n\n## Related projects\n\n*   [Official Apache HBase project](http://hbase.apache.org)\n*   [REST server bundled with HBase (Stargate)](https://wiki.apache.org/hadoop/Hbase/Stargate)\n\n## Contributors\n\n*   David Worms: <https://github.com/wdavidw>\n*   Michael Kurze: <https://github.com/michaelku>\n*   Michal Taborsky: <https://github.com/whizz>\n*   Pierre Sauvage: <https://github.com/Pierrotws>\n\n[ryba]: https://github.com/ryba-io/ryba\n[scanner]: https://github.com/adaltas/node-hbase/blob/master/test/scanner.coffee\n[mt_samples]: https://gist.github.com/3979381\n[mt_home]: https://github.com/stelcheck\n[krb5]: https://github.com/adaltas/node-krb5\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/adaltas/node-hbase.git"
  },
  "scripts": {
    "coffee": "coffee -b -o lib src",
    "pretest": "coffee -b -o lib src",
    "test": "NODE_ENV=test ./node_modules/.bin/mocha test/**/*.coffee"
  },
  "version": "0.3.0"
}
